<?xml version="1.0" encoding="Windows-1252"?>
<context>
CommandHandler 
</context>
<caption>
Gestionnaire de commande de base
</caption>
<preamble>
FRA_vf_um052_Handler_Outline.htm
</preamble>
<hint>
Cet assistant génére le code d'un gestionnaire de commande de base.   
</hint>
<sequence>
000100  
</sequence>
<handler>
VF_UM128 
VF_UM129     
VF_UM130   
</handler>
<handlertxt>
Si les zones de la liste d'instances et les identifiants sont corrects, passer à l'étape suivante.   
Préciser les zones que vous voulez sur le gestionnaire de commande.                   
Préciser les éléments que vous voulez inclure dans le code généré.         
</handlertxt>
<code>
<<include VF_UM052_CommandHandler_Preamble.vfi>>
Function Options(*DIRECT) 
Begin_Com Role(*EXTENDS £VF_AC010) Layoutmanager(£MAIN_LAYOUT) Width(600) Height(240) 
* <<majorsep>>
* Définitions de zones simples et groupes
* <<majorsep>>   
<<if UM057_Has_HEADFields>>
Group_by Name(£XG_HEAD) <<UM057_GenHeadGroup>>
<<endif>>
<<if CA_UM056_CHK_CONNECT>>
define field(£con_rslt) type(*char) length(2)
Def_Cond Name(*conresult) Cond(£con_rslt = OK)
<<endif>> 
* <<majorsep>>
* Définitions de composants
* <<majorsep>>
<<Comment>>Panneaux de présentation du corps et des boutons 
Define_Com Class(£PRIM_PANL) Name(£BUTTON_PANEL) Displayposition(2) Height(182) Layoutmanager(£BUTTON_FLOW) Left(246) Parent(£COM_OWNER) Tabposition(2) Tabstop(False) Top(0) Width(88)
Define_Com Class(£PRIM_PANL) Name(£BODY_HEAD) VerticalScroll(True) Displayposition(1) Layoutmanager(£BODY_HEAD_FLOW)  Left(0) Parent(£COM_OWNER) Tabposition(1) Tabstop(False) Top(0) Width(246)

<<Comment>>Gestionnaires de présentation par liaison et centrage
Define_Com Class(£PRIM_ATLM) Name(£MAIN_LAYOUT)
Define_Com Class(£PRIM_ATLI) Name(£BUTTON_ATTACH) Attachment(Right)  Manage(£BUTTON_PANEL) Parent(£MAIN_LAYOUT)
Define_Com Class(£PRIM_FWLM) Name(£BUTTON_FLOW)   Direction(TopToBottom) Flowoperation(Center) Marginbottom(4) Marginleft(4) Marginright(4) Margintop(4) Spacing(4) Spacingitems(4)

Define_Com Class(£PRIM_ATLI) Name(£BODY_ATTACH)   Attachment(Center) Manage(£BODY_HEAD) Parent(£MAIN_LAYOUT)
Define_Com Class(£PRIM_FWLM) Name(£BODY_HEAD_FLOW) Direction(TopToBottom) Marginbottom(4) Marginleft(4) Marginright(4) Margintop(4) Spacing(4) Spacingitems(4)
<<if CA_UM056_SAVEBTN>>
<<Comment>> Le bouton enregistrer
Define_Com class(£PRIM_PHBN) Name(£SAVE_BUTTON) Buttondefault(True) Caption('Enregistrer') Parent(£BUTTON_PANEL) 
Define_Com Class(£PRIM_FWLI) Name(£FWLI_SAVE_BUTTON) Manage(£SAVE_BUTTON) Parent(£BUTTON_FLOW)
<<endif>>
<<if UM057_Has_HEADFields>>
<<comment>>Zones dans l'entête
<<UM057_Repeat True ALL HEAD>>Define_Com Class(£<<field>>.Visual) Parent(£BODY_HEAD) LabelType(<<UM056_Identify_With>>)  Marginleft(160)
<<UM057_Repeat False ALL HEAD>>Define_Com Class(£PRIM_FWLI) Name(£FWLI_<<Field>>) Manage(£<<field>>) Parent(£BODY_HEAD_FLOW)
<<endif>> 
* <<majorsep>>
* Définitions des événements
* <<majorsep>>
<<CommentBlock>>
* <<majorsep>>
* Définitions des propriétés
* <<majorsep>>
<<CommentBlock>>
* <<majorsep>>
* Définitions des méthodes
* <<majorsep>>
* <<minorsep>>
* Gérer l'exécution de la commande
* <<minorsep>>
<<CommentBlock>>
Mthroutine Name(uExecute) Options(*REDEFINE)
<<Comment>>La zone code retour et la condition la testant
Define £Ret_Code reffld(£STD_BOOL)
Def_cond Name(*RetOkay) Cond((£Ret_Code = OK) *OR (£Ret_Code = TRUE)) 
<<Comment>>Effectuer toute logique de fin définie dans l'ancêtre 
£Com_Ancestor.uExecute
<<Comment>> Vider tout message précédent
use builtin(clr_messages)
<<if CA_UM056_CHK_CONNECT>>
<<comment>>Vérifier que la connexion est toujours active 
£avFrameworkManager.avCheckConnection ReturnValue(£con_rslt)
If Cond(*conresult)
<<endif>> 
<<if UM057_Has_HEADFields>>
<<UM055_GenGetLst>>
<<comment>>Lire les données du fichier principal pour alimenter les zones de l'entête du formulaire 
Fetch Fields(£XG_HEAD) From_File(<<UM055_BaseFile>>) With_Key(<<UM055_BaseFileKeys>>) 
<<if CA_UM056_CHK_CONNECT>>
endif
<<endif>> 
<<CommentBlock>>
Endroutine
<<CommentBlock>>
<<if CA_UM056_INITIALIZE>>
* <<minorsep>>
* Gérer l'initialisation
* <<minorsep>>
Mthroutine Name(uInitialize) Options(*REDEFINE)
<<Comment>>Effectuer les initialisations définies dans l'ancêtre 
£Com_Ancestor.uInitialize
<<CommentBlock>>
* <ici votre logique d'initialisation> 
* <ici votre logique d'initialisation> 
* <ici votre logique d'initialisation> 
<<CommentBlock>>
Endroutine
<<endif>>
<<if CA_UM056_TERMINATE>>
* <<minorsep>>
* Gérer l'achèvement
* <<minorsep>>
Mthroutine Name(uTerminate) Options(*REDEFINE)
<<CommentBlock>>
* <ici votre logique d'achèvement>
* <ici votre logique d'achèvement>
* <ici votre logique d'achèvement>
<<CommentBlock>>
<<Comment>>Effectuer les logiques d'achèvement de l'ancêtre
£Com_Ancestor.uTerminate 
<<CommentBlock>>
Endroutine
<<endif>>
* <<majorsep>>
* Sous-programmes
* <<majorsep>>
<<CommentBlock>>
* <<majorsep>>
* Gestionnaires d'événement
* <<majorsep>>
<<CommentBlock>>
<<if CA_UM056_SAVEBTN>>
* <<minorsep>>
* Gérer le bouton enregistrer 
* <<minorsep>>
<<CommentBlock>>
EvtRoutine Handling(£SAVE_BUTTON.Click)
<<comment>>Les messages seront vidés
<<if CA_UM056_CHK_CONNECT>>
<<comment>>Vérifier que la connexion est toujours active 
£avFrameworkManager.avCheckConnection ReturnValue(£con_rslt)
If Cond(*conresult)
<<endif>> 
<<CommentBlock>>
Check_For In_File(<<UM055_BaseFile>>) With_Key(<<UM055_BaseFileKeys>>)
If_Status Is_Not(*EQUALKEY)
Insert Fields(£XG_HEAD) To_File(<<UM055_BaseFile>>)  IO_ERROR(*NEXT) VAL_ERROR(*NEXT) ISSUE_MSG(*YES)
Else
Update Fields(£XG_HEAD) In_File(<<UM055_BaseFile>>) With_Key(<<UM055_BaseFileKeys>>)  IO_ERROR(*NEXT) VAL_ERROR(*NEXT) ISSUE_MSG(*YES)
Endif
<<CommentBlock>>
<<if CA_UM056_CHK_CONNECT>>
endif
<<endif>> 
Endroutine
<<endif>>
<<commentblock>>
End_Com
</code>