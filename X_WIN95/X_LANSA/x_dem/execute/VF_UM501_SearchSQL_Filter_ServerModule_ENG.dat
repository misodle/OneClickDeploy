* ---------------------------------------------------------------------------------------------------
* This is a server module in framework <<FRAMEWORK>>.
* It belongs to business object <<BUSINESS_OBJECT_CAPTION>>.
* It was created on <<CREATEDDATE>> by <<CREATEDUSER>>.
* In this usage diagram it is highlighted in ORANGE:
* Annotate Img=%partdir%VF_UM501_SearchSQL_Slide2.PNG width=1000 height=339
* Note: If you can’t see the diagram, go to the Home tab, then move across into the Design area.
*       Click on the bottom right image that has the hint “Toggle Annotation Enabled/Disabled state”.
* ---------------------------------------------------------------------------------------------------
Begin_Com Role(*EXTENDS #PRIM_SRVM)  Sessionidentifier('VLFONE')
* ---------------------------------------------------------------------------------
* Declare the shared server system manager. It must be declared exactly this
* way in any server modules or reusable parts that want to use it.
Define_Com Class(#<<SERVER_MANAGER>>) Name(#ServerSystemManager) Scope(*APPLICATION)
* These strings coming from the logon validator. They allow the logon validator to pass information
* into your shared server system manager. For example, an IBM i library list to be used, or
* details about the currently logged on user or other system states.
Define Field(#Persistent_ApplicationString1) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString2) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString3) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString4) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString5) Type(*NVARCHAR)

* ---------------------------------------------------------------------------------
Group_By Name(#XG_SearchFields) Fields(<<EXPAND_KEYSGROUP>>)
Def_List Name(#SearchFields) Fields(#XG_SearchFields) Type(*Working) Entrys(1)

Define Field(#InstanceList_Count) Reffld(#Std_Int)
Def_List Name(#InstanceList_Columns) Fields(<<EXPAND_INSTANCELISTNAMES>>) Counter(#InstanceList_Count) Type(*Working) Entrys(*MAX)
* ---------------------------------------------------------------------------------

Srvroutine Name(Search)  Session(*REQUIRED)
List_Map For(*input) List(#SearchFields)
List_Map For(*OUTPUT) List(#InstanceList_Columns)

* Field for the SQL Where clause - Note this HAS to be alpha - cannot be unicode
Define_Com Class(#prim_alph) Name(#WhereClause)

* Field that indicates that all search values are ok
Define_Com Class(#prim_boln) Name(#Valid) Value(True)


* Invoke the server manager to set up the execution context for this server routine
#ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5)

* get the key list data into fields
Get_Entry Number(1) From_List(#SearchFields)

* Build up the WHERE clause for the SQL


* Note: If your ServerSystemManager does not have a uMakeWhereString method routine,
* then you need to regenerate your ServerSystemManager.

* A) Make a backup copy of your current ServerSystemManager
* B) Delete your ServerSystemManager component from the repository
* C) Generate any filter or command handler - this will automatically also create the ServerSystemManager

<<EXPAND_MAKE_SQL_WHERE>>#ServerSystemManager.uMakeWhereString Uwhere(#WhereClause) Ulongname(%LONGNAME%) Ushortname(%SHORTNAME%) Utype(%TYPE%) Uoperator(%OPERATOR%) Ucomparevalue(%COMPAREVALUE%)  Uvalid(#Valid) %UNICODE% %IGNORECASE%

* Do not do the select if the SQL statement contains possible SQL Injection
If (#Valid)

If (#WhereClause *NE *blanks)
<<EXPAND_SELECT_SQL_WHERE>>Select_SQL Fields(<<EXPAND_INSTANCELISTNAMES>>) From_Files(<<EXPAND_PHYSICAL>>) Where(#WhereClause)
Add_Entry To_List(#InstanceList_Columns)
Endselect
Else
<<EXPAND_SELECT_SQL_WHERE>>Select_SQL Fields(<<EXPAND_INSTANCELISTNAMES>>) From_Files(<<EXPAND_PHYSICAL>>)
Add_Entry To_List(#InstanceList_Columns)
Endselect
Endif

Else
Message Msgtxt(*MTXTUF_SQLWARNING)
Endif

* Invoke the server manager to clean up and finalize the execution context for this server routine
#ServerSystemManager.TerminateServiceRoutine

Endroutine

End_Com