<caption>  
A skeleton filter       
</caption>
<context>
Filter 
</context>
<preamble>
ENG_vf_um052_Filter_Skeleton_Wam.htm
</preamble>
<mode>
WAM
</mode>
<sequence> 
000150  
</sequence>
<handler>
</handler>
<handlertxt>
</handlertxt>
<hint>
This assistant produces an outline skeleton for a wam based filter. It is designed for experienced developers who intend to add most of the code to the filter themsleves.
</hint>
<code>
<<include VF_UM052_Filter_Preamble.vfi>>
Function Options(*DIRECT)
BEGIN_COM ROLE(*EXTENDS #PRIM_WAM) Sessionstatus(None) Layoutweblet('vlf_layout_v2')
<<comment>>Standard declares for a filter
Define_Com CLASS(#vf_sw100) NAME(#avFrameworkManager)
Define_Com Class(#vf_aw007) Name(#ThisFilter) Reference(*Dynamic)
Define_Com Class(#vf_lw002) Name(#avListManager) Reference(*Dynamic)
Define_Com Class(#fp_in001) Name(#FastPart) Reference(*Dynamic)
<<comment>>VL Framework map fields. DO NOT CHANGE.
Web_Map For(*both) Fields((#VF_FRAMEI *private) (#VF_FRAMEW *private) (#VF_FRAMES *private) (#VF_ELXTOF *private) (#VF_ELXN01 *private) (#VF_ELXN02 *private) (#VF_ELXN03 *private) (#VF_ELXN04 *private) (#VF_ELXN05 *private) (#VF_ELXN06 *private) 
+ (#VF_ELXN07 *private) (#VF_ELXN08 *private) (#VF_ELXN09 *private) (#VF_ELXN10 *private) (#VF_ELXA01 *private) (#VF_ELXA02 *private) (#VF_ELXA03 *private) (#VF_ELXA04 *private) (#VF_ELXA05 *private) (#VF_ELXA06 *private) (#VF_ELXA07 *private) 
+ (#VF_ELXA08 *private) (#VF_ELXA09 *private) (#VF_ELXA10 *private)(#VF_ELMETA *private))
<<comment>>Map fields used in this form.
Override Field(#UB_PUSHB1) Default('Button 1')
Override Field(#UB_PUSHB2) Default('Button 2')
Web_Map For(*both) Fields((#UB_SEARCH *Noid) (#UB_PUSHB1 *Noid) (#UB_PUSHB2 *Noid))
<<comment>>Standard webroutine used by all VLF WAM filters and command handlers. DO NOT CHANGE the Web routine name. Use this routine to register WAM events.
Webroutine Name(UHandleEvent)
<<comment>>Register the event that will execute when clicking on the Search button in this filter as wam event number 1.
#avFrameworkManager.avRegisterEvent Named(UB_SEARCH.CLICK) Signalaswamevent(1)
<<comment>>Register the event that will execute when clicking on the Push button 1 in this filter as wam event number 2.
#avFrameworkManager.avRegisterEvent Named(UB_PUSHB1.CLICK) Signalaswamevent(2)
<<comment>>Register the event that will execute when clicking on the Push button 2 in this filter as wam event number 3.
#avFrameworkManager.avRegisterEvent Named(UB_PUSHB2.CLICK) Signalaswamevent(3)
<<comment>>Standard WAM initialisation. 
#avFrameworkManager.avInitializeWAM Type(FILTER) Invoker(#com_owner) Listmanager(#avListManager) Filtermanager(#ThisFilter) Fastpartmanager(#FastPart)
#avFrameworkManager.avHandleWAMEvent Anchorblock(#vf_framew) Event(#vf_event) Designmode(#vf_framed) Skin(#VF_Frames) Metatag(#vf_elmeta) Tof(#vf_elxtof) N01(#vf_elxn01) N02(#vf_elxn02) N03(#vf_elxn03) N04(#vf_elxn04) N05(#vf_elxn05) 
+ N06(#vf_elxn06) N07(#vf_elxn07) N08(#vf_elxn08) N09(#vf_elxn09) 
+ N10(#vf_elxn10) A01(#vf_elxA01) A02(#vf_elxA02) A03(#vf_elxA03) A04(#vf_elxA04) A05(#vf_elxA05) A06(#vf_elxA06) A07(#vf_elxA07) A08(#vf_elxA08) A09(#vf_elxA09) A10(#vf_elxA10) Ssiname(#VF_FRAMEI)
Endroutine
<<comment>>Handle initialization of filter
Evtroutine Handling(#avFrameworkManager.uexecute) Options(*noclearmessages *noclearerrors)
Endroutine
<<Comment>>Handle push of the search button registered as wam event 1
Evtroutine Handling(#avFrameworkManager.uWAMEvent_1) Options(*noclearmessages *noclearerrors)
<<comment>>Your search button handling logic goes here
Endroutine
<<Comment>>Handle click of push button 1 registered as wam event 2
Evtroutine Handling(#avFrameworkManager.uWAMEvent_2) Options(*noclearmessages *noclearerrors)
<<comment>>Your handling logic goes here
Endroutine
<<Comment>>Handle click of push button 2 registered as wam event 3
Evtroutine Handling(#avFrameworkManager.uWAMEvent_3) Options(*noclearmessages *noclearerrors)
<<comment>>Your handling logic goes here
Endroutine
End_Com
</code>