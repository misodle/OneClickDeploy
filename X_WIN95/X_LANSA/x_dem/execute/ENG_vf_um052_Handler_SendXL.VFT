<context>
CommandHandler 
</context>
<caption>
Send data to MS-Excel as a CSV file
</caption>
<preamble>
ENG_vf_um052_Handler_SendXL.htm
</preamble>
<hint>
This assistant produces the code for a command handler that allows the end user to send data to MS-Excel as a CSV file.   
</hint>
<sequence>
000100  
</sequence>
<handler>
VF_UM055 
VF_UM057     
</handler>
<handlertxt>
Specify the identification protocol you have decided to use for this business object. If a physical file resembles this business object specify its name and the assistant will attempt to automatically deduce a basic identification protocol for you.    
Specify in the top area all the fields that you want to allow the end user to select from. The end user will be able to choose which of these fields they want to send to a spreadsheet. DO NOT specify any fields in the list area.                  
</handlertxt>
<code>
<<include VF_UM052_CommandHandler_Preamble.vfi>>
Function Options(*DIRECT) 
Begin_Com Role(*EXTENDS #VF_AC010) Layoutmanager(#MAIN_LAYOUT) Width(600) Height(240) 
* <<majorsep>>
* Simple Field and Group Definitions
* <<majorsep>>   
<<if UM057_Has_HEADFields>>
Group_by Name(#XG_HEAD) <<UM057_GenHeadGroup>>
<<endif>>
* <<majorsep>>
* Component definitions
* <<majorsep>>
<<Comment>>Body and Button arrangement panels
define_com class(#PRIM_PANL) name(#BUTTON_PANEL) displayposition(2) height(240) layoutmanager(#BUTTON_FLOW) left(485) parent(#COM_OWNER) tabposition(2) tabstop(False) top(0) width(115)
define_com class(#PRIM_PANL) name(#BODY_HEAD) displayposition(1) height(240) layoutmanager(#ATLM_1) left(0) parent(#COM_OWNER) tabposition(1) tabstop(False) top(0) verticalscroll(True) width(485)

<<Comment>>Attachment and flow layout managers
define_com class(#PRIM_ATLM) name(#MAIN_LAYOUT)
define_com class(#PRIM_ATLI) name(#BUTTON_ATTACH) attachment(Right) manage(#BUTTON_PANEL) parent(#MAIN_LAYOUT)
define_com class(#PRIM_FWLM) name(#BUTTON_FLOW) direction(TopToBottom) flowoperation(Center) marginbottom(4) marginleft(4) marginright(4) margintop(4) spacing(4) spacingitems(4)
define_com class(#PRIM_ATLI) name(#BODY_ATTACH) attachment(Center) manage(#BODY_HEAD) parent(#MAIN_LAYOUT)
define_com class(#PRIM_ATLI) name(#ATLI_2) attachment(Center) manage(#GPBX_BODY) parent(#ATLM_1)
define_com class(#PRIM_FWLM) name(#FWLM_1) direction(TopToBottom) sizingrulehor(Maximize) spacing(2) spacingitems(2)
define_com class(#PRIM_FWLI) name(#FWLI_2) manage(#RDBN_ALL) parent(#FWLM_1)
define_com class(#PRIM_FWLI) name(#FWLI_3) manage(#RDBN_SEL) parent(#FWLM_1)

<<Comment>> The Send to XL  button
define_com class(#PRIM_PHBN) name(#PHBN_XL) caption(*MTXTUF_SENDXL) displayposition(1) left(5) parent(#BUTTON_PANEL) tabposition(1) top(4) width(104)
define_com class(#PRIM_FWLI) name(#FWLI_1) manage(#PHBN_XL) parent(#BUTTON_FLOW)

<<Comment>> field selection list view
define_com class(#PRIM_LTVW) name(#LTVW_FLDS) checkboxes(True) componentversion(2) displayposition(1) fullrowselect(True) height(240) left(0) parent(#BODY_HEAD) showsortarrow(True) tabposition(1) top(0) width(187)
define_com class(#PRIM_LVCL) name(#LVCL_1) displayposition(1) parent(#LTVW_FLDS) source(#FP_EDESC) width(100)
define_com class(#PRIM_LVCL) name(#LVCL_2) parent(#LTVW_FLDS) source(#FP_EIDN) visible(False)
define_com class(#PRIM_ATLM) name(#ATLM_1)
define_com class(#PRIM_ATLI) name(#ATLI_1) attachment(Left) manage(#LTVW_FLDS) parent(#ATLM_1)

<<Comment>> Choose all entries or selected entries
define_com class(#PRIM_GPBX) name(#GPBX_BODY) displayposition(2) height(240) left(142) parent(#BODY_HEAD) tabposition(2) tabstop(False) top(0) width(343)
define_com class(#PRIM_GPBX) name(#GPBX_SEL) displayposition(1) height(69) layoutmanager(#FWLM_1) parent(#GPBX_BODY) tabposition(1) tabstop(False) top(13) width(222)
define_com class(#PRIM_RDBN) name(#RDBN_ALL) buttonchecked(True) caption('All Instance List entries') displayposition(1) left(4) parent(#GPBX_SEL) tabposition(1) top(11) width(214)
define_com class(#PRIM_RDBN) name(#RDBN_SEL) caption('Just the selected instance list entries') displayposition(2) left(4) parent(#GPBX_SEL) tabposition(2) top(38) width(214)

<<if UM057_Has_HEADFields>>
* <<majorsep>>
* Events Definitions
* <<majorsep>>
<<CommentBlock>>
* <<majorsep>>
* Property Definitions
* <<majorsep>>
<<CommentBlock>>
* <<majorsep>>
* Method Definitions
* <<majorsep>>
* <<minorsep>>
* Handle Command Execution
* <<minorsep>>
<<CommentBlock>>
Mthroutine Name(uExecute) Options(*REDEFINE)
<<Comment>>The return code field and testing condition
Define #Ret_Code reffld(#vf_elretc)
Def_cond   Name(*RetOkay) Cond(#Ret_Code = OK) 
<<Comment>>Do any execution logic defined in the ancestor 
#Com_Ancestor.uExecute
<<UM055_GenGetLst>>
<<comment>>Fetch information from the main file to fill in the header fields on the form 
Fetch Fields(#XG_HEAD) From_File(<<UM055_BaseFile>>) With_Key(<<UM055_BaseFileKeys>>) 
<<CommentBlock>>
Endroutine
<<CommentBlock>>
* <<minorsep>>
* Handle Initialization
* <<minorsep>>
Mthroutine Name(uInitialize) Options(*REDEFINE)
<<Comment>>Do any initialization defined in the ancestor 
#Com_Ancestor.uInitialize
<<Comment>> Initialize list of selectable fields
clr_list #ltvw_flds

<<UM057_Repeat False ALL HEAD>>execute add_field with_parms('<<field>>' '<<field_description>>')

Endroutine

<<CommentBlock>>
* <<minorsep>>
* Wrap a field value for a CSV file in quotes and add a comma
* <<minorsep>>
mthroutine uCSVQuote
define_map for(*both) class(#std_strng) name(#uString)
<<Comment>> Additional processing required for embedded "
<<Comment>> (embedded comma are handled by wrapping the entire string in quotes which we do anyway)

define #DblQuote reffld(#Quote) default('"')
define #FourQuote *char 2 default('""')
<<CommentBlock>>
if #uString.Contains(#DblQuote)
#uString := #uString.ReplaceAll(#DblQuote #FourQuote)
endif
#uString :=   #DblQuote + #uString + #DblQuote +  #delimiter
<<CommentBlock>>
endroutine
<<CommentBlock>>




* <<majorsep>>
* Subroutines
* <<majorsep>>
<<CommentBlock>>
subroutine name(Add_field) parms((#fp_eidn *received) (#fp_edesc *received) )
add_entry #ltvw_flds
#ltvw_flds.CurrentItem.Checked := true
endroutine

* <<majorsep>>
* Event Handlers
* <<majorsep>>
<<CommentBlock>>
* Handle the Send to XL button

EVTROUTINE HANDLING(#PHBN_XL.Click)
define #toFile reffld(#vf_elurl)
define #OutString type(*STRING) length(3000)
define #AsString type(*STRING)

define field(#FILENO) type(*DEC) length(3) decimals(0) desc('Allocated file number')
define field(#OPTIONS) type(*CHAR) length(256) desc('Options for stream file open')
define field(#RETC) type(*Char) length(2) desc('Return Code')
define #retn *dec 7 0

define field(#delimiter) type(*char) length(1) default(''',''')
* determine what the excel delimiter character is for this PC - (for excel, CSV does not necessarily mean comma delimited)
use builtin(GET_REGISTRY_VALUE) with_args(HKEY_CURRENT_USER 'Control Panel\International' 'sList') to_get(#DELIMITER #VF_ELRETC)


if #RDBN_ALL.ButtonChecked
* Get all entries
<<UM055_GenGetIns TRUE Ret_Code>>
else
<<UM055_GenGetSel FIRST Ret_Code>>
endif


if *RetOkay

* Set up the stream file

#toFile := *Temp_dir + #com_owner.Name + '_' + *datetimec + '.csv'

#OPTIONS := 'Write'

use builtin(STM_FILE_OPEN) with_args(#toFile #Options) to_get(#FILENO #RETC)

* Output the column headings

#OutString := *null

selectlist #ltvw_flds
if '#ltvw_flds.CurrentItem.Checked *eq True'
#AsString := #fp_edesc.Trim
#Com_Owner.uCSVQuote uString(#AsString)
#OutString := #OutString + #AsString
endif
endselect

* Write out the string of column headings to a file
use builtin(STM_FILE_WRITE) with_args(#FILENO #OutString) to_get(#RETC)


DoWhile *RetOkay
Fetch Fields(#XG_HEAD) From_File(<<UM055_BaseFile>>) With_Key(<<UM055_BaseFileKeys>>) 

#OutString := *null

selectlist #ltvw_flds
if cond(#ltvw_flds.CurrentItem.Checked *eq True)
#AsString := *null

* 
CASE of_field(#fp_eidn)
<<UM057_Repeat False ALPHA HEAD>>when value_is(= '<<field>>')<<split>>#AsString := #<<field>>
<<UM057_Repeat False NUMERIC HEAD>>when value_is(= '<<field>>')<<split>>#AsString := #<<field>>.AsDisplayString
endcase

#Com_Owner.uCSVQuote uString(#AsString)
#OutString := #OutString + #AsString

endif
endselect

* Write out the string to a file
use builtin(STM_FILE_WRITE) with_args(#FILENO #OutString) to_get(#RETC)

if #RDBN_ALL.ButtonChecked
* Get all entries
<<UM055_GenGetIns FALSE Ret_Code>>
else
<<UM055_GenGetSel NEXT Ret_Code>>
endif

EndWhile

use builtin(STM_FILE_CLOSE) with_args(#FILENO)

USE builtin(SYSTEM_COMMAND) with_args(H #toFile) to_get(#retn)

endif
ENDROUTINE
<<commentblock>>
End_Com

<<endif>>
</code>