<context>
CommandHandler 
</context>
<caption>
CRUD Command Handler
</caption>
<preamble>
ENG_vf_um052_Handler_CRUD_One.htm
</preamble>
<hint>
This assistant produces the code for a CRUD (Create/Read/Update/Delete) command handler.  
</hint>
<mode>
ONE
</mode>
<sequence>
000100  
</sequence>
<handler>
VF_UM128 
VF_UM129  
VF_UM130   
</handler>
<handlertxt>
If  the Instance List fields and Identifier fields are correct, proceed to the next step.   
Specify the fields that you want on your command handler.                   
Specify the things that you would like to include in the generated code.     
</handlertxt>
<code>
<<include VF_UM052_CommandHandler_Preamble.vfi>>
*
* NOTE: This command handler was designed to be invoked by the New, Delete, and other (e.g. Details or Create/Read/Update/Delete) commands
* It uses the user-object-type of the command to decide how to behave.
*
Function Options(*DIRECT) 
Begin_Com Role(*EXTENDS #VF_AC010O) Layoutmanager(#TableLayout_Main) Width(600) Height(240)  Verticalscroll(True)

* Table Layout

Define_Com Class(#PRIM_TBLO) Name(#TableLayout_Main)

Define_Com Class(#PRIM_TBLO.Column) Name(#Column1) Displayposition(1) Parent(#TableLayout_Main)
Define_Com Class(#PRIM_TBLO.Row) Name(#Row1) Displayposition(1) Parent(#TableLayout_Main) Height(1.72)
Define_Com Class(#PRIM_TBLO.Row) Name(#Row2) Displayposition(2) Parent(#TableLayout_Main) Height(25) Units(Pixels)

* Groups

Group_by Name(#XG_HEAD) <<UM057_GenHeadGroup>>
Group_By   Name(#XG_Keys)   Fields(<<UM055_BaseFileKeys>>)

* Work Fields

define field(#cmd_type) type(*char) length(32) desc('user object type of the command')
Define_com #prim_boln #Ret_Code

* Collection of fields on the panel

DEFINE_COM CLASS(#Prim_ACol<#prim_evp>) NAME(#PanelFields)
Define_Com Class(#Prim_ACol<#prim_evp>) Name(#KeyFields)


<<if CA_UM056_SAVEBTN>>
* The new/update/delete button

DEFINE_COM CLASS(#PRIM_PHBN) NAME(#Button_All) BUTTONDEFAULT(True) CAPTION('Undefined') DISPLAYPOSITION(1) LEFT(12) PARENT(#Com_Owner) TABPOSITION(1) TOP(4) WIDTH(120)
Define_Com Class(#PRIM_TBLO.Item) Name(#Button_AllItem1) Manage(#Button_All) Parent(#TableLayout_Main) Row(#Row2) Sizing(FitToHeight) Column(#Column1) Alignment(CenterLeft) Flow(Right)
<<endif>>

* Fields on the panel

<<UM057_Repeat True ALL HEAD>>Define_Com Class(#<<field>>.Visual) Parent(#Com_Owner) LabelType(<<UM056_Identify_With>>) Marginleft(160)
<<UM057_Repeat False ALL HEAD>>Define_Com Class(#PRIM_TBLO.Item) Name(#<<Field>>Item1) Manage(#<<Field>>) Parent(#TableLayout_Main) Row(#Row1) Column(#Column1) Alignment(TopLeft) Flow(Down)  Sizing(FitToWidth)  Marginleft(5) Margintop(5) Marginright(5)


* <<majorsep>>
* Routines
* <<majorsep>>


* <<minorsep>>
* Handle Command Execution
* <<minorsep>>
Mthroutine Name(uExecute) Options(*REDEFINE)

* Clear any previous messages
#AVFRAMEWORKMANAGER.avClearMessages Requester(#COM_OWNER)

<<Comment>>Do any execution logic defined in the ancestor
#COM_ANCESTOR.uExecute GotoFreeState(#GotoFreeState) SwitchCallerReference(#SwitchCallerReference)
<<CommentBlock>>
#Button_All.enabled := false
<<CommentBlock>>
* The behaviour of this command handler is modified by the user-object-type of the command that initiated it.
* (To see the user-object-type of the command, start the framework in design mode and work with commands) 
<<CommentBlock>>
#Cmd_type := #Com_Owner.avCommandType
Case #Cmd_type
When Value_Is(= NEW, = COMMAND_NEW)
SET Com(#PanelFields<>) Enabled(true)
#Button_All.caption := 'Save New Details'
#XG_Head := *null
When Value_Is(= COPY, = COMMAND_COPY)
SET Com(#PanelFields<>) Enabled(true)
#Button_All.caption := 'Save New Details'
#Com_owner.getAssociated
When Value_Is(= DELETE, = COMMAND_DELETE)
SET Com(#PanelFields<>) Enabled(False)
set #Button_All enabled(true) caption('Confirm Deletion')
#Com_owner.getAssociated
otherwise
SET Com(#PanelFields<>) Enabled(true)
SET Com(#KeyFields<>) Enabled(False)
#Button_All.caption := 'Save Changes'
#Com_owner.getAssociated
endcase
<<CommentBlock>>
Endroutine

Mthroutine Name(uInitialize) Options(*REDEFINE)
Define_Com Class(#prim_evp) Name(#TempField) Reference(*DYNAMIC)

* Do any initialization defined in the ancestor 
#Com_Ancestor.uInitialize

* <your initialization logic goes here>
* <your initialization logic goes here>
* <your initialization logic goes here>


* Build collection of Editable fields
For Each(#Control) In(#Com_Owner.ComponentControls)
If_Ref Com(#Control) Is(*INSTANCE_OF #prim_evp)
#TempField <= #Control *As #prim_evp
#PanelFields.Insert( #TempField )
Endif
Endfor

* Build collection of Key fields
<<UM055_RepeatKeys>>#KeyFields.Insert(#<<field>> )

Endroutine


Mthroutine Name(uTerminate) Options(*REDEFINE)

* <your termination logic goes here>
* <your termination logic goes here>
* <your termination logic goes here>

#PanelFields.RemoveAll
#KeyFields.RemoveAll

* Do any termination defined in the ancestor
#Com_Ancestor.uTerminate 

Endroutine


* <<minorsep>>
* display the associated instance in preparation for an update or delete
* <<minorsep>>
mthroutine name(getAssociated) 

* Define the data service
Define_Com Class(#<<UM055_BaseFileWAM>>.Find) Name(#Find)
Define_Com Class(#vf_elretc) Name(#uStatus)

Group_By Name(#DataFields) <<UM055_BaseFileFields minusKey>>

If_Ref Com(#Com_Owner.avAssociatedInstance) Is_Not(*NULL)

<<UM055_GenGetLst ASSOCIATED>>

if #Ret_code
* Get the data from the server by doing a synchronous call to the Data service Server Module

#Find.Execute(<<UM055_BaseFileKeys>> #DataFields #uStatus )

If (#uStatus *EQ OK)

* If required process your displayed data here

Else
#AVFRAMEWORKMANAGER.avIssueMessage Text('Not found on Server') Requester(#Com_Owner)
Endif
Else
#AVFRAMEWORKMANAGER.avIssueMessage Text('No associated item found') Requester(#Com_Owner)
Endif
Endif

endroutine

EvtRoutine Handling(#Button_All.Click)
CASE OF_FIELD(#CMD_TYPE)
When Value_Is(= DELETE, = COMMAND_DELETE)
#com_owner.uDelete
Otherwise
#com_owner.uSave
EndCase
Endroutine

mthroutine uSave
* Note you may use the Save srvroutine if you want to update all the fields on the record
* If you don't want to update all fields on the record you will need to write your own Update srvroutine in <<UM055_BaseFileWAM>> and use that instead of .Save
Define_Com Class(#<<UM055_BaseFileWAM>>.Save) Name(#Save)
Define_Com Class(#vf_elretc) Name(#uStatus)

* Get the definition of this group of fields from Server Module  <<UM055_BaseFileWAM>>
Group_By Name(#SaveFields) <<UM055_BaseFileFields>>

* Note: Clear messages in status bar otherwise old messages are too confusing
#AVFRAMEWORKMANAGER.avClearMessages Requester(#COM_OWNER)

* Now initiate the save (the synchronous .Execute is ok if quick)
#Save.Execute( #SaveFields #uStatus )

If (#uStatus = OK)
* Message indicating successful update
#avFrameworkManager.avIssueMessage Text('Save was successful') Requester(#COM_OWNER)


CASE OF_FIELD(#CMD_TYPE)
When Value_Is(= NEW, = COMMAND_NEW, = COPY, = COMMAND_COPY)

* Add a new instance list entry
<<UM055_AddtoList *NONE APPEND >>  Setascurrent(True) Select(True)
OTHERWISE
* Update the associated instance list entry
<<UM055_GenSetVIDs>>
#Com_Owner.avAssociatedInstance.avVisualID1 := #UF_VisID1u
#Com_Owner.avAssociatedInstance.avVisualID2 := #UF_VisID2u

* Update any other Additional Columns here, if required
* For example
* #Com_Owner.avAssociatedInstance.avAColumn1  := 'My Value'

#COM_OWNER.avAssociatedInstance.avUpdateDisplay
ENDCASE
#Button_All.Enabled := False
Endif

* Get server messages and issue them in the Framework
#avFrameworkManager.avReceiveSystemMessageQueue Requester(#Com_owner)


CASE OF_FIELD(#CMD_TYPE)
When Value_Is(= NEW, = COMMAND_NEW)
* Prepare for the next entry
#XG_HEAD := *NULL
ENDCASE
Endroutine

Mthroutine uDelete
Define_Com Class(#<<UM055_BaseFileWAM>>.Delete) Name(#Delete)
Define_Com Class(#vf_elretc) Name(#uStatus)

If_Ref Com(#Com_Owner.avAssociatedInstance) Is_Not(*NULL)

* Note: Clear messages in status bar otherwise old messages are too confusing
#AVFRAMEWORKMANAGER.avClearMessages Requester(#COM_OWNER)

* Now initiate the save (the synchronous .Execute is ok if quick)
#Delete.Execute( #XG_Keys #uStatus )

If (#uStatus = OK)
* Message indicating successful update
#avFrameworkManager.avIssueMessage Text('Delete was successful') Requester(#COM_OWNER)

* Update the instancelist entry

#Com_Owner.avAssociatedInstance.avVisualId2 += ' (Deleted)'
#Com_Owner.avAssociatedInstance.avUpdateDisplay

#Button_All.Enabled := False
Endif

* Get server messages and issue them in the Framework
#avFrameworkManager.avReceiveSystemMessageQueue Requester(#Com_owner)
Endif
endroutine


EvtRoutine Handling(#PanelFields<>.Changed)
#Button_All.Enabled := True
EndRoutine
<<commentblock>>
End_Com
</code>