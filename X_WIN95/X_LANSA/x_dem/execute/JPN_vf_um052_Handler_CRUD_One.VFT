<context>
CommandHandler 
</context>
<caption>
CRUD コマンド ハンドラー
</caption>
<preamble>
JPN_vf_um052_Handler_CRUD_One.htm
</preamble>
<hint>
このアシスタントは CRUD (Create/Read/Update/Delete) コマンド ハンドラー用のコードを生成します。  
</hint>
<mode>
ONE
</mode>
<sequence>
000100  
</sequence>
<handler>
VF_UM128 
VF_UM129  
VF_UM130   
</handler>
<handlertxt>
インスタンス リストのフィールドと識別フィールドが正しい場合、次のステップに進みます。  
コマンド ハンドラーに必要なフィールドを指定します。                   
生成コードに含むものも指定します。    
</handlertxt>
<code>
<<include VF_UM052_CommandHandler_Preamble.vfi>>
*
* 注: このコマンド ハンドラーは新規、削除、やその他 (例: 詳細やCRUD (作成/読み込み/更新/削除)など) のコマンドにより起動されるよう設計されています。
* コマンドの user-object-type を使って、その動作方法が決定されます。
*
Function Options(*DIRECT) 
Begin_Com Role(*EXTENDS #VF_AC010O) Layoutmanager(#TableLayout_Main) Width(600) Height(240)  Verticalscroll(True)

* テーブル レイアウト

Define_Com Class(#PRIM_TBLO) Name(#TableLayout_Main)

Define_Com Class(#PRIM_TBLO.Column) Name(#Column1) Displayposition(1) Parent(#TableLayout_Main)
Define_Com Class(#PRIM_TBLO.Row) Name(#Row1) Displayposition(1) Parent(#TableLayout_Main) Height(1.72)
Define_Com Class(#PRIM_TBLO.Row) Name(#Row2) Displayposition(2) Parent(#TableLayout_Main) Height(25) Units(Pixels)

* グループ

Group_by Name(#XG_HEAD) <<UM057_GenHeadGroup>>
Group_By   Name(#XG_Keys)   Fields(<<UM055_BaseFileKeys>>)

* 作業フィールド

define field(#cmd_type) type(*char) length(32) desc('user object type of the command')
Define_com #prim_boln #Ret_Code

* パネル上のフィールドのコレクション

DEFINE_COM CLASS(#Prim_ACol<#prim_evp>) NAME(#PanelFields)
Define_Com Class(#Prim_ACol<#prim_evp>) Name(#KeyFields)


<<if CA_UM056_SAVEBTN>>
* 新規/更新/削除ボタン

DEFINE_COM CLASS(#PRIM_PHBN) NAME(#Button_All) BUTTONDEFAULT(True) CAPTION('Undefined') DISPLAYPOSITION(1) LEFT(12) PARENT(#Com_Owner) TABPOSITION(1) TOP(4) WIDTH(120)
Define_Com Class(#PRIM_TBLO.Item) Name(#Button_AllItem1) Manage(#Button_All) Parent(#TableLayout_Main) Row(#Row2) Sizing(FitToHeight) Column(#Column1) Alignment(CenterLeft) Flow(Right)
<<endif>>

* パネル上のフィールド

<<UM057_Repeat True ALL HEAD>>Define_Com Class(#<<field>>.Visual) Parent(#Com_Owner) LabelType(<<UM056_Identify_With>>) Marginleft(160)
<<UM057_Repeat False ALL HEAD>>Define_Com Class(#PRIM_TBLO.Item) Name(#<<Field>>Item1) Manage(#<<Field>>) Parent(#TableLayout_Main) Row(#Row1) Column(#Column1) Alignment(TopLeft) Flow(Down)  Sizing(FitToWidth)  Marginleft(5) Margintop(5) Marginright(5)


* <<majorsep>>
* ルーチン
* <<majorsep>>


* <<minorsep>>
* コマンド実行処理
* <<minorsep>>
Mthroutine Name(uExecute) Options(*REDEFINE)

* これまでのメッセージをすべてクリア
#AVFRAMEWORKMANAGER.avClearMessages Requester(#COM_OWNER)

<<Comment>>祖先で実行ロジックの定義があるか
#COM_ANCESTOR.uExecute GotoFreeState(#GotoFreeState) SwitchCallerReference(#SwitchCallerReference)
<<CommentBlock>>
#Button_All.enabled := false
<<CommentBlock>>
* このコマンド ハンドラーの動作はこれを起動したコマンドの user-object-type により変更されます。
* (コマンドの user-object-type を確認するには、フレームワークをデザイン モードで起動し、コマンドの処理を始めます)  
<<CommentBlock>>
#Cmd_type := #Com_Owner.avCommandType
Case #Cmd_type
When Value_Is(= NEW, = COMMAND_NEW)
SET Com(#PanelFields<>) Enabled(true)
#Button_All.caption := 'Save New Details'
#XG_Head := *null
When Value_Is(= COPY, = COMMAND_COPY)
SET Com(#PanelFields<>) Enabled(true)
#Button_All.caption := 'Save New Details'
#Com_owner.getAssociated
When Value_Is(= DELETE, = COMMAND_DELETE)
SET Com(#PanelFields<>) Enabled(False)
set #Button_All enabled(true) caption('Confirm Deletion')
#Com_owner.getAssociated
otherwise
SET Com(#PanelFields<>) Enabled(true)
SET Com(#KeyFields<>) Enabled(False)
#Button_All.caption := 'Save Changes'
#Com_owner.getAssociated
endcase
<<CommentBlock>>
Endroutine

Mthroutine Name(uInitialize) Options(*REDEFINE)
Define_Com Class(#prim_evp) Name(#TempField) Reference(*DYNAMIC)

* 祖先に定義されている初期化をすべて実行 
#Com_Ancestor.uInitialize

* <初期化ロジックをここに記述>
* <初期化ロジックをここに記述>
* <初期化ロジックをここに記述>


* 編集可能フィールドのコレクションを作成
For Each(#Control) In(#Com_Owner.ComponentControls)
If_Ref Com(#Control) Is(*INSTANCE_OF #prim_evp)
#TempField <= #Control *As #prim_evp
#PanelFields.Insert( #TempField )
Endif
Endfor

* キー フィールドのコレクション作成
<<UM055_RepeatKeys>>#KeyFields.Insert(#<<field>> )

Endroutine


Mthroutine Name(uTerminate) Options(*REDEFINE)

* <終了ロジックをここに記述>
* <終了ロジックをここに記述>
* <終了ロジックをここに記述>

#PanelFields.RemoveAll
#KeyFields.RemoveAll

* 祖先に終了定義があるか
#Com_Ancestor.uTerminate 

Endroutine


* <<minorsep>>
* 更新または削除処理準備中の関連インスタンスを表示
* <<minorsep>>
mthroutine name(getAssociated) 

* データ サービス定義
Define_Com Class(#<<UM055_BaseFileWAM>>.Find) Name(#Find)
Define_Com Class(#vf_elretc) Name(#uStatus)

Group_By Name(#DataFields) <<UM055_BaseFileFields minusKey>>

If_Ref Com(#Com_Owner.avAssociatedInstance) Is_Not(*NULL)

<<UM055_GenGetLst ASSOCIATED>>

if #Ret_code
* データ サービス サーバー モジュールへの同期呼び出しによりサーバーからデータを取得

#Find.Execute(<<UM055_BaseFileKeys>> #DataFields #uStatus )

If (#uStatus *EQ OK)

* 必要に応じて、ここで表示データの処理

Else
#AVFRAMEWORKMANAGER.avIssueMessage Text('Not found on Server') Requester(#Com_Owner)
Endif
Else
#AVFRAMEWORKMANAGER.avIssueMessage Text('No associated item found') Requester(#Com_Owner)
Endif
Endif

endroutine

EvtRoutine Handling(#Button_All.Click)
CASE OF_FIELD(#CMD_TYPE)
When Value_Is(= DELETE, = COMMAND_DELETE)
#com_owner.uDelete
Otherwise
#com_owner.uSave
EndCase
Endroutine

mthroutine uSave
* レコードの全フィールドを更新する場合は、Save srvroutine を使用することができます。
* レコードの全フィールドを更新しない場合は、.Save の代わりに独自の Update srvroutine を <<UM055_BaseFileWAM>> に記述し、これを使用する必要があります。
Define_Com Class(#<<UM055_BaseFileWAM>>.Save) Name(#Save)
Define_Com Class(#vf_elretc) Name(#uStatus)

* サーバー モジュール <<UM055_BaseFileWAM>> からこのフィールド グループの定義を取得
Group_By Name(#SaveFields) <<UM055_BaseFileFields>>

* 注: 古いメッセージは紛らわしいため、ステータス バーのメッセージをクリア
#AVFRAMEWORKMANAGER.avClearMessages Requester(#COM_OWNER)

* Save の起動 (同期的な .Execute の方が早ければ、それでも可)
#Save.Execute( #SaveFields #uStatus )

If (#uStatus = OK)
* 正常に更新されたことを示すメッセージ
#avFrameworkManager.avIssueMessage Text('Save was successful') Requester(#COM_OWNER)


CASE OF_FIELD(#CMD_TYPE)
When Value_Is(= NEW, = COMMAND_NEW, = COPY, = COMMAND_COPY)

* 新規インスタンス リスト エントリーを追加
<<UM055_AddtoList *NONE APPEND >>  Setascurrent(True) Select(True)
OTHERWISE
* 関連するリスト エントリーを更新
<<UM055_GenSetVIDs>>
#Com_Owner.avAssociatedInstance.avVisualID1 := #UF_VisID1u
#Com_Owner.avAssociatedInstance.avVisualID2 := #UF_VisID2u

* 必要であれば、その他の追加列をここで更新
* 例：
* #Com_Owner.avAssociatedInstance.avAColumn1  := 'My Value'

#COM_OWNER.avAssociatedInstance.avUpdateDisplay
ENDCASE
#Button_All.Enabled := False
Endif

* サーバー メッセージを取得し、フレームワークで発行
#avFrameworkManager.avReceiveSystemMessageQueue Requester(#Com_owner)


CASE OF_FIELD(#CMD_TYPE)
When Value_Is(= NEW, = COMMAND_NEW)
* 次のエントリーのための準備
#XG_HEAD := *NULL
ENDCASE
Endroutine

Mthroutine uDelete
Define_Com Class(#<<UM055_BaseFileWAM>>.Delete) Name(#Delete)
Define_Com Class(#vf_elretc) Name(#uStatus)

If_Ref Com(#Com_Owner.avAssociatedInstance) Is_Not(*NULL)

* 注: 古いメッセージは紛らわしいため、ステータス バーのメッセージをクリア
#AVFRAMEWORKMANAGER.avClearMessages Requester(#COM_OWNER)

* Save の初期化 (同期的な .Execute の方が早ければ、それでも可)
#Delete.Execute( #XG_Keys #uStatus )

If (#uStatus = OK)
* 正常に更新されたことを示すメッセージ
#avFrameworkManager.avIssueMessage Text('Delete was successful') Requester(#COM_OWNER)

* インスタント エントリーを更新

#Com_Owner.avAssociatedInstance.avVisualId2 += ' (Deleted)'
#Com_Owner.avAssociatedInstance.avUpdateDisplay

#Button_All.Enabled := False
Endif

* サーバー メッセージを取得し、フレームワークで発行
#avFrameworkManager.avReceiveSystemMessageQueue Requester(#Com_owner)
Endif
endroutine


EvtRoutine Handling(#PanelFields<>.Changed)
#Button_All.Enabled := True
EndRoutine
<<commentblock>>
End_Com
</code>