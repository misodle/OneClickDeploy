* ------------------------------------------------------------------------------------------------
* This is a server module in framework <<FRAMEWORK>>.
* It belongs to business object <<BUSINESS_OBJECT_CAPTION>>.
* It was created on <<CREATEDDATE>> by <<CREATEDUSER>>.
* ------------------------------------------------------------------------------------------------
Begin_Com Role(*EXTENDS #PRIM_SRVM) Sessionidentifier('VLFONE')

* ---------------------------------------------------------------------------------
* Declare the shared server system manager. It must be declared exactly this
* way in any server modules or reusable parts that want to use it.
Define_Com Class(#<<SERVER_MANAGER>>) Name(#ServerSystemManager) Scope(*APPLICATION)
* These strings coming from the logon validator. They allow the logon validator to pass information
* into your shared server system manager. For example, an IBM i library list to be used, or
* details about the currently logged on user or other system states.
Define Field(#Persistent_ApplicationString1) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString2) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString3) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString4) Type(*NVARCHAR)
Define Field(#Persistent_ApplicationString5) Type(*NVARCHAR)

* ------------------------------------------------------------------------------------------------
* Define the return code returned by all server routines
Define Field(#ServerModuleResult) Type(*BOOLEAN)

* ------------------------------------------------------------------------------------------------
Srvroutine Name(Operation_1) Session(*REQUIRED)
Field_Map For(*OUTPUT) Field(#ServerModuleResult)

Define_Com Class(#Prim_dc.UnicodeString) Name(#TestMessage)

* Invoke the server manager to set up the execution context for this server routine
#ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5)

* Process the 'prototype' operation by issuing a test message
#TestMessage := "Server routine Operation_1 executed in server module <<SERVER_MODULE>>"
Message Msgtxt(#TestMessage)

* Set the return code
#ServerModuleResult := True

* Invoke the server manager to clean up and finalize the execution context for this server routine
#ServerSystemManager.TerminateServiceRoutine

Endroutine

* ------------------------------------------------------------------------------------------------
Srvroutine Name(Operation_2) Session(*REQUIRED)
Field_Map For(*OUTPUT) Field(#ServerModuleResult)

Define_Com Class(#Prim_dc.UnicodeString) Name(#TestMessage)

* Invoke the server manager to set up the execution context for this server routine
#ServerSystemManager.InitializeServiceRoutine Persistentstring1(#Persistent_ApplicationString1) Persistentstring2(#Persistent_ApplicationString2) Persistentstring3(#Persistent_ApplicationString3) Persistentstring4(#Persistent_ApplicationString4) Persistentstring5(#Persistent_ApplicationString5)

* Process the 'prototype' operation by issuing a test message
#TestMessage := "Server routine Operation_2 executed in server module <<SERVER_MODULE>>"
Message Msgtxt(#TestMessage)

* Set the return code
#ServerModuleResult := True

* Invoke the server manager to clean up and finalize the execution context for this server routine
#ServerSystemManager.TerminateServiceRoutine

Endroutine

End_Com
